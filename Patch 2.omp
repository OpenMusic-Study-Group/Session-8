; OM File Header - Saved 2020/11/08 8:55:11
; (6.17 :patc (om-make-point 11 60) (om-make-point -8 -8) (om-make-point 1280 637) "" 183 0 "2020/10/31 18:44:34" "2020/11/08 8:55:11")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Patch 2" (quote ((let ((box (om-load-boxcall (quote abstraction) "convert to bpc" (om-load-patch-abs1 "convert to bpc" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 124 479) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 89 479) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 123 73) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "y" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 216 242) nil nil nil (list (let ((box (om-load-boxwithed1 (quote box-with-win) "y" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 337 73) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 240 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 268 146) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 76 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "y" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR 2" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 296 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 496 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 400 111) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GRAPHICS-TO-LIST" (quote graphics-to-list) (quote ((om-load-inputfun (quote input-funbox) "GRAPHICS" "GRAPHICS" nil))) (om-make-point 163 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 76 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (4 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "y" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "x" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 79 243) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "CADR 2" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 265 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "x" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 354 91) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 268 146) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 227 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 76 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "x" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 496 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 409 141) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GRAPHICS-TO-LIST" (quote graphics-to-list) (quote ((om-load-inputfun (quote input-funbox) "GRAPHICS" "GRAPHICS" nil))) (om-make-point 160 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 76 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (3 1 7 0 nil 0) (3 0 8 0 nil 0))) 1 "x" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 231 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 64 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 1 0 nil 0) (2 0 3 0 nil 0) (2 0 4 0 nil 0) (3 0 5 0 nil 0) (4 0 6 0 nil 0))) 6.17 nil "" (om-make-point -7 0) (om-make-point 639 588)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1657/4 184) nil (list (list 15079/51040 120951/408320 30477/102080 123503/408320 6223/20416 125417/408320 25211/81664 126693/408320 12765/40832 64463/204160 3271/10208 26487/81664 133711/408320 134987/408320 27125/81664 136263/408320 136901/408320 137539/408320 68929/204160 34943/102080 36219/102080 147747/408320 4647/12760 149661/408320 30315/81664 154127/408320 31591/81664 20183/51040 163697/408320 16593/40832 41961/102080 42599/102080 173267/408320 178371/408320 182199/408320 37333/81664 37971/81664 193683/408320 49617/102080 201339/408320 203891/408320 103381/204160 207719/408320 52169/102080 52807/102080 13441/25520 217289/408320 217927/408320 109761/204160 221117/408320 223031/408320 55997/102080 224307/408320 14079/25520 228773/408320 233877/408320 11965/20416 243447/408320 61739/102080 251741/408320 63653/102080 129539/204160 131453/204160 268967/408320 55197/81664 283003/408320 289383/408320 293849/408320 296401/408320 297039/408320 6383/20416 128617/408320 133721/408320 1835/5104 166897/408320 36697/81664 23773/51040 9573/20416 198159/408320 41801/81664 219213/408320 112637/204160 46267/81664 233249/408320 30153/51040 254303/408320 260683/408320 261321/408320) (list 23521/56546 23521/56546 23619/56546 23619/56546 23815/56546 23815/56546 23913/56546 24011/56546 24207/56546 24305/56546 24501/56546 24697/56546 24795/56546 24893/56546 25089/56546 25187/56546 25285/56546 25481/56546 25481/56546 25775/56546 26363/56546 26657/56546 26657/56546 26853/56546 27049/56546 27245/56546 27637/56546 27931/56546 28127/56546 28421/56546 28519/56546 28715/56546 29009/56546 29499/56546 29793/56546 30185/56546 30479/56546 30871/56546 31361/56546 31655/56546 31851/56546 32243/56546 32341/56546 32537/56546 32929/56546 33615/56546 34007/56546 34105/56546 34399/56546 34693/56546 34889/56546 34987/56546 35085/56546 35281/56546 35869/56546 36555/56546 37143/56546 37535/56546 37829/56546 38123/56546 38221/56546 38515/56546 38809/56546 39201/56546 39593/56546 39887/56546 40083/56546 40279/56546 40377/56546 40475/56546 20624/28273 20624/28273 20477/28273 20036/28273 19350/28273 18713/28273 18223/28273 18125/28273 17684/28273 17145/28273 16508/28273 15969/28273 15528/28273 15381/28273 14793/28273 13862/28273 13421/28273 13372/28273)) nil "convert to bpc"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE 5" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 350 23) (om-make-point 80 80) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote pen) (list (list 15079/51040 23521/56546) (list 120951/408320 23521/56546) (list 30477/102080 23619/56546) (list 123503/408320 23619/56546) (list 6223/20416 23815/56546) (list 125417/408320 23815/56546) (list 25211/81664 23913/56546) (list 126693/408320 24011/56546) (list 12765/40832 24207/56546) (list 64463/204160 24305/56546) (list 3271/10208 24501/56546) (list 26487/81664 24697/56546) (list 133711/408320 24795/56546) (list 134987/408320 24893/56546) (list 27125/81664 25089/56546) (list 136263/408320 25187/56546) (list 136901/408320 25285/56546) (list 137539/408320 25481/56546) (list 68929/204160 25481/56546) (list 34943/102080 25775/56546) (list 36219/102080 26363/56546) (list 147747/408320 26657/56546) (list 4647/12760 26657/56546) (list 149661/408320 26853/56546) (list 30315/81664 27049/56546) (list 154127/408320 27245/56546) (list 31591/81664 27637/56546) (list 20183/51040 27931/56546) (list 163697/408320 28127/56546) (list 16593/40832 28421/56546) (list 41961/102080 28519/56546) (list 42599/102080 28715/56546) (list 173267/408320 29009/56546) (list 178371/408320 29499/56546) (list 182199/408320 29793/56546) (list 37333/81664 30185/56546) (list 37971/81664 30479/56546) (list 193683/408320 30871/56546) (list 49617/102080 31361/56546) (list 201339/408320 31655/56546) (list 203891/408320 31851/56546) (list 103381/204160 32243/56546) (list 207719/408320 32341/56546) (list 52169/102080 32537/56546) (list 52807/102080 32929/56546) (list 13441/25520 33615/56546) (list 217289/408320 34007/56546) (list 217927/408320 34105/56546) (list 109761/204160 34399/56546) (list 221117/408320 34693/56546) (list 223031/408320 34889/56546) (list 55997/102080 34987/56546) (list 224307/408320 35085/56546) (list 14079/25520 35281/56546) (list 228773/408320 35869/56546) (list 233877/408320 36555/56546) (list 11965/20416 37143/56546) (list 243447/408320 37535/56546) (list 61739/102080 37829/56546) (list 251741/408320 38123/56546) (list 63653/102080 38221/56546) (list 129539/204160 38515/56546) (list 131453/204160 38809/56546) (list 268967/408320 39201/56546) (list 55197/81664 39593/56546) (list 283003/408320 39887/56546) (list 289383/408320 40083/56546) (list 293849/408320 40279/56546) (list 296401/408320 40377/56546) (list 297039/408320 40475/56546)) (list (om-make-color 0 0 0) 1 (quote line) nil) nil) (list (quote pen) (list (list 6383/20416 20624/28273) (list 128617/408320 20624/28273) (list 133721/408320 20477/28273) (list 1835/5104 20036/28273) (list 166897/408320 19350/28273) (list 36697/81664 18713/28273) (list 23773/51040 18223/28273) (list 9573/20416 18125/28273) (list 198159/408320 17684/28273) (list 41801/81664 17145/28273) (list 219213/408320 16508/28273) (list 112637/204160 15969/28273) (list 46267/81664 15528/28273) (list 233249/408320 15381/28273) (list 30153/51040 14793/28273) (list 254303/408320 13862/28273) (list 260683/408320 13421/28273) (list 261321/408320 13372/28273)) (list (om-make-color 0 0 0) 1 (quote line) nil) nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 633 0) (om-make-point 638 628))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 626 397) (om-make-point 33 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC 4" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 353 471) (om-make-point 214 105) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29543495 0.2962162 0.29855993 0.3024662 0.30480996 0.3071537 0.3087162 0.3102787 0.31262246 0.31574747 0.32043496 0.3243412 0.32746622 0.3305912 0.3321537 0.33371618 0.3352787 0.3368412 0.33762246 0.34230995 0.35480997 0.3618412 0.36418495 0.3665287 0.3712162 0.3774662 0.38684118 0.39543495 0.4009037 0.40637246 0.41105995 0.41730994 0.4243412 0.43684122 0.4462162 0.45715368 0.4649662 0.4743412 0.48605993 0.49309123 0.49934122 0.50637246 0.50871617 0.51105994 0.51730997 0.52668494 0.5321537 0.5337162 0.53762246 0.5415287 0.5462162 0.54855997 0.5493412 0.551685 0.56027866 0.5727787 0.5860599 0.5962162 0.60480994 0.6165287 0.62355996 0.6344974 0.64387244 0.6587162 0.6759037 0.6930912 0.7087162 0.71965367 0.7259037 0.72746617 0.31264693 0.3149907 0.3274907 0.35952196 0.4087407 0.4493657 0.46577194 0.46889693 0.4853032 0.5118657 0.5368657 0.5517094 0.5665532 0.5712407 0.590772 0.6228032 0.6384282 0.6399907)) (quote (0.41596222 0.41596222 0.41769534 0.41769534 0.42116153 0.42116153 0.42289466 0.42462775 0.42809394 0.42982703 0.43329325 0.43675944 0.43849257 0.44022563 0.44369188 0.44542494 0.44715807 0.45062426 0.45062426 0.45582357 0.4662222 0.47142148 0.47142148 0.47488767 0.47835392 0.4818201 0.48875254 0.49395186 0.49741805 0.50261736 0.5043505 0.5078167 0.513016 0.5216815 0.52688075 0.5338132 0.5390125 0.54594487 0.5546104 0.5598097 0.56327594 0.5702083 0.57194144 0.5754076 0.58234007 0.59447176 0.60140414 0.60313726 0.60833657 0.6135359 0.61700207 0.6187352 0.62046826 0.6239345 0.63433314 0.6464648 0.65686346 0.6637959 0.6689952 0.67419446 0.6759276 0.68112684 0.68632615 0.6932586 0.70019097 0.7053903 0.7088565 0.7123227 0.71405584 0.7157889 0.7294592 0.7294592 0.7242599 0.708662 0.68439854 0.6618682 0.6445372 0.641071 0.6254731 0.60640896 0.5838786 0.5648145 0.54921657 0.54401726 0.52322 0.4902911 0.47469318 0.47296005)) (quote bpc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 638 628) (om-make-point 633 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1188 357) (om-make-point 42 28) (list 15) "(15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE 4" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 456 23) (om-make-point 80 80) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote pen) (list (list 177/374 62/195) (list 8/17 62/195) (list 175/374 62/195) (list 175/374 61/195) (list 87/187 61/195) (list 173/374 4/13) (list 86/187 4/13) (list 86/187 59/195) (list 171/374 59/195) (list 171/374 58/195) (list 5/11 58/195) (list 5/11 19/65) (list 169/374 56/195) (list 84/187 11/39) (list 84/187 18/65) (list 167/374 18/65) (list 83/187 53/195) (list 83/187 4/15) (list 15/34 4/15) (list 15/34 17/65) (list 82/187 17/65) (list 82/187 10/39) (list 163/374 10/39) (list 163/374 49/195) (list 81/187 16/65) (list 161/374 16/65) (list 161/374 47/195) (list 80/187 47/195) (list 80/187 46/195) (list 159/374 46/195) (list 79/187 46/195) (list 157/374 46/195) (list 78/187 46/195) (list 155/374 46/195) (list 7/17 46/195) (list 9/22 46/195) (list 76/187 46/195) (list 151/374 46/195) (list 75/187 46/195) (list 149/374 46/195) (list 74/187 46/195) (list 147/374 46/195) (list 73/187 46/195) (list 145/374 46/195) (list 72/187 46/195) (list 13/34 46/195) (list 71/187 46/195) (list 141/374 46/195) (list 70/187 47/195) (list 139/374 47/195) (list 69/187 47/195) (list 69/187 16/65) (list 69/187 49/195) (list 137/374 49/195) (list 137/374 10/39) (list 137/374 17/65) (list 137/374 4/15) (list 4/11 53/195) (list 4/11 18/65) (list 4/11 56/195) (list 4/11 58/195) (list 4/11 59/195) (list 4/11 4/13) (list 4/11 62/195) (list 4/11 21/65) (list 4/11 64/195) (list 4/11 1/3) (list 4/11 22/65) (list 4/11 67/195) (list 4/11 68/195) (list 4/11 23/65) (list 137/374 23/65) (list 137/374 14/39) (list 137/374 71/195) (list 137/374 24/65) (list 69/187 73/195) (list 69/187 74/195) (list 69/187 5/13) (list 139/374 76/195) (list 139/374 77/195) (list 70/187 2/5) (list 141/374 2/5) (list 141/374 16/39) (list 71/187 16/39) (list 13/34 27/65) (list 72/187 82/195) (list 72/187 83/195) (list 145/374 28/65) (list 73/187 17/39) (list 147/374 17/39) (list 147/374 86/195) (list 74/187 86/195) (list 74/187 29/65) (list 149/374 29/65) (list 149/374 88/195) (list 149/374 89/195) (list 151/374 6/13) (list 151/374 7/15) (list 151/374 92/195) (list 76/187 92/195) (list 9/22 31/65) (list 7/17 94/195) (list 155/374 19/39) (list 155/374 32/65) (list 78/187 32/65) (list 78/187 97/195) (list 157/374 98/195) (list 79/187 33/65) (list 159/374 20/39) (list 159/374 101/195) (list 159/374 34/65) (list 80/187 34/65) (list 80/187 103/195) (list 161/374 103/195) (list 161/374 8/15) (list 81/187 8/15) (list 81/187 7/13) (list 163/374 106/195) (list 82/187 107/195) (list 82/187 36/65) (list 15/34 109/195) (list 83/187 22/39) (list 83/187 37/65) (list 167/374 112/195) (list 167/374 113/195) (list 84/187 38/65) (list 169/374 23/39) (list 169/374 116/195) (list 5/11 118/195) (list 5/11 119/195) (list 171/374 121/195) (list 86/187 122/195) (list 86/187 41/65) (list 86/187 124/195) (list 173/374 124/195) (list 173/374 25/39) (list 173/374 42/65) (list 87/187 42/65) (list 87/187 127/195) (list 87/187 128/195) (list 175/374 43/65) (list 8/17 43/65) (list 8/17 2/3) (list 8/17 131/195) (list 177/374 131/195) (list 177/374 44/65) (list 177/374 133/195) (list 89/187 133/195) (list 179/374 134/195) (list 179/374 9/13) (list 179/374 136/195) (list 179/374 137/195) (list 90/187 137/195) (list 90/187 46/65) (list 90/187 139/195) (list 90/187 28/39) (list 90/187 47/65) (list 90/187 28/39) (list 90/187 139/195) (list 90/187 137/195) (list 181/374 9/13) (list 181/374 134/195) (list 181/374 44/65) (list 91/187 131/195) (list 91/187 2/3) (list 183/374 43/65) (list 183/374 128/195) (list 183/374 42/65) (list 92/187 25/39) (list 92/187 124/195) (list 92/187 122/195) (list 185/374 121/195) (list 185/374 8/13) (list 93/187 8/13) (list 93/187 119/195) (list 1/2 118/195) (list 1/2 3/5) (list 94/187 116/195) (list 94/187 23/39) (list 189/374 23/39) (list 95/187 38/65) (list 95/187 113/195) (list 95/187 112/195) (list 191/374 37/65) (list 96/187 22/39) (list 96/187 109/195) (list 193/374 36/65) (list 97/187 107/195) (list 97/187 106/195) (list 195/374 7/13) (list 195/374 8/15) (list 197/374 103/195) (list 197/374 101/195) (list 199/374 33/65) (list 100/187 33/65) (list 100/187 97/195) (list 201/374 97/195) (list 101/187 32/65) (list 203/374 19/39) (list 203/374 94/195) (list 6/11 31/65) (list 205/374 92/195) (list 205/374 7/15) (list 207/374 89/195) (list 207/374 88/195) (list 104/187 29/65) (list 19/34 17/39) (list 105/187 28/65) (list 105/187 82/195) (list 105/187 27/65) (list 211/374 79/195) (list 211/374 2/5) (list 211/374 77/195) (list 211/374 76/195) (list 211/374 5/13) (list 106/187 74/195) (list 106/187 24/65) (list 106/187 14/39) (list 106/187 23/65) (list 106/187 68/195) (list 213/374 67/195) (list 213/374 22/65) (list 213/374 1/3) (list 107/187 64/195) (list 107/187 21/65) (list 107/187 62/195) (list 215/374 61/195) (list 215/374 4/13) (list 215/374 59/195) (list 215/374 58/195) (list 215/374 19/65) (list 215/374 56/195) (list 215/374 18/65) (list 215/374 53/195) (list 215/374 4/15) (list 215/374 10/39) (list 215/374 49/195) (list 215/374 16/65) (list 107/187 16/65) (list 107/187 47/195) (list 107/187 46/195) (list 213/374 46/195) (list 106/187 3/13) (list 211/374 3/13) (list 211/374 44/195) (list 105/187 44/195) (list 19/34 43/195) (list 104/187 43/195) (list 207/374 43/195) (list 103/187 14/65) (list 6/11 14/65) (list 203/374 14/65) (list 101/187 14/65) (list 201/374 14/65) (list 100/187 14/65) (list 199/374 14/65) (list 9/17 14/65) (list 197/374 14/65) (list 98/187 43/195) (list 98/187 44/195) (list 195/374 44/195) (list 97/187 3/13) (list 193/374 46/195) (list 96/187 46/195) (list 96/187 47/195) (list 191/374 16/65) (list 191/374 49/195) (list 95/187 49/195) (list 95/187 10/39) (list 95/187 17/65) (list 189/374 17/65) (list 189/374 4/15) (list 94/187 4/15) (list 94/187 53/195) (list 1/2 53/195) (list 1/2 18/65) (list 93/187 11/39) (list 92/187 19/65) (list 183/374 58/195) (list 91/187 58/195) (list 91/187 59/195) (list 181/374 59/195) (list 90/187 59/195) (list 90/187 4/13) (list 179/374 61/195) (list 89/187 61/195) (list 89/187 62/195) (list 177/374 62/195) (list 8/17 62/195) (list 8/17 21/65) (list 177/374 21/65)) (list (om-make-color 0 0 0) 1 (quote line) nil) nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 566 105) (om-make-point 374 235))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 22 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 286 379) (om-make-point 33 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "y" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 229 351) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 240 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 268 146) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 76 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "y" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "x" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 125 346) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 268 146) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 227 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 76 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "x" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 194 18) (om-make-point 80 80) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote pen) (list (list 79/335 2/5) (list 79/335 84/215) (list 79/335 83/215) (list 79/335 82/215) (list 79/335 81/215) (list 79/335 78/215) (list 79/335 77/215) (list 79/335 74/215) (list 16/67 72/215) (list 81/335 14/43) (list 81/335 68/215) (list 82/335 66/215) (list 83/335 64/215) (list 84/335 63/215) (list 17/67 12/43) (list 87/335 58/215) (list 88/335 56/215) (list 18/67 54/215) (list 18/67 52/215) (list 91/335 51/215) (list 92/335 10/43) (list 92/335 49/215) (list 93/335 48/215) (list 94/335 47/215) (list 19/67 47/215) (list 19/67 46/215) (list 96/335 46/215) (list 96/335 9/43) (list 97/335 9/43) (list 97/335 44/215) (list 99/335 44/215) (list 101/335 44/215) (list 104/335 44/215) (list 107/335 44/215) (list 22/67 44/215) (list 111/335 44/215) (list 113/335 44/215) (list 23/67 44/215) (list 116/335 44/215) (list 117/335 9/43) (list 119/335 46/215) (list 24/67 47/215) (list 122/335 10/43) (list 25/67 54/215) (list 127/335 11/43) (list 26/67 59/215) (list 132/335 61/215) (list 2/5 63/215) (list 136/335 13/43) (list 138/335 68/215) (list 139/335 14/43) (list 28/67 72/215) (list 141/335 74/215) (list 141/335 76/215) (list 141/335 79/215) (list 142/335 81/215) (list 143/335 17/43) (list 144/335 89/215) (list 144/335 18/43) (list 144/335 93/215) (list 144/335 94/215) (list 144/335 96/215) (list 29/67 97/215) (list 29/67 102/215) (list 146/335 104/215) (list 146/335 106/215) (list 146/335 108/215) (list 146/335 111/215) (list 147/335 111/215) (list 148/335 111/215) (list 147/335 113/215) (list 146/335 113/215) (list 144/335 23/43) (list 141/335 116/215) (list 28/67 118/215) (list 139/335 118/215) (list 137/335 24/43) (list 136/335 24/43) (list 136/335 121/215) (list 2/5 121/215) (list 133/335 121/215) (list 131/335 122/215) (list 129/335 124/215) (list 127/335 124/215) (list 124/335 126/215) (list 122/335 126/215) (list 121/335 127/215) (list 119/335 3/5) (list 118/335 3/5) (list 117/335 26/43) (list 116/335 26/43) (list 114/335 131/215) (list 112/335 133/215) (list 22/67 27/43) (list 108/335 136/215) (list 107/335 137/215) (list 21/67 28/43) (list 104/335 141/215) (list 104/335 142/215) (list 103/335 144/215) (list 103/335 29/43) (list 103/335 146/215)) (list (om-make-color 0 0 0) 1 (quote line) nil) nil))) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 1280 637) (om-make-point -8 -8))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC 3" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 83 444) (om-make-point 214 105) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2358209 0.2358209 0.2358209 0.2358209 0.2358209 0.2358209 0.2358209 0.2358209 0.23880597 0.24179106 0.24179106 0.24477612 0.2477612 0.25074628 0.25373134 0.2597015 0.26268658 0.26865673 0.26865673 0.2716418 0.27462688 0.27462688 0.27761194 0.28059703 0.2835821 0.2835821 0.28656718 0.28656718 0.28955224 0.28955224 0.2955224 0.30149254 0.31044778 0.319403 0.32835823 0.3313433 0.33731344 0.3432836 0.34626865 0.34925374 0.3552239 0.35820895 0.3641791 0.37313434 0.3791045 0.3880597 0.39402986 0.4 0.40597016 0.4119403 0.41492537 0.41791046 0.42089552 0.42089552 0.42089552 0.4238806 0.42686567 0.42985073 0.42985073 0.42985073 0.42985073 0.42985073 0.43283585 0.43283585 0.4358209 0.4358209 0.4358209 0.4358209 0.43880597 0.44179103 0.43880597 0.4358209 0.42985073 0.42089552 0.41791046 0.41492537 0.40895522 0.40597016 0.40597016 0.4 0.39701495 0.3910448 0.38507465 0.3791045 0.37014925 0.3641791 0.36119404 0.3552239 0.3522388 0.34925374 0.34626865 0.3402985 0.33432835 0.32835823 0.32238808 0.319403 0.31343284 0.31044778 0.31044778 0.3074627 0.3074627 0.3074627)) (quote (0.4 0.3906977 0.38604653 0.38139534 0.37674418 0.3627907 0.35813954 0.34418604 0.33488372 0.3255814 0.31627905 0.30697674 0.29767442 0.29302326 0.27906978 0.26976746 0.26046512 0.2511628 0.24186045 0.23720929 0.23255813 0.22790697 0.22325582 0.21860464 0.21860464 0.21395348 0.21395348 0.20930232 0.20930232 0.20465116 0.20465116 0.20465116 0.20465116 0.20465116 0.20465116 0.20465116 0.20465116 0.20465116 0.20465116 0.20930232 0.21395348 0.21860464 0.23255813 0.2511628 0.25581396 0.27441862 0.28372094 0.29302326 0.30232558 0.31627905 0.3255814 0.33488372 0.34418604 0.3534884 0.36744186 0.37674418 0.39534885 0.41395348 0.41860464 0.43255812 0.43720928 0.44651163 0.4511628 0.47441858 0.4837209 0.49302325 0.5023256 0.5162791 0.5162791 0.5162791 0.5255814 0.5255814 0.53488374 0.5395349 0.54883725 0.54883725 0.55813957 0.55813957 0.5627907 0.5627907 0.5627907 0.5674419 0.5767442 0.5767442 0.5860465 0.5860465 0.5906977 0.6 0.6 0.60465116 0.60465116 0.60930235 0.61860466 0.627907 0.6325581 0.6372093 0.6511628 0.65581394 0.6604651 0.66976744 0.67441857 0.67906976)) (quote bpc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1280 597) (om-make-point -8 -8) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PICTURE 2" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 77 27) (om-make-point 80 80) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote line) (list 122/335 137/215 297/335 176/215) (list (om-make-color 0 0 0) 1 (quote line) nil) nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 374 255))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "GRAPHIC-OBJECT" (quote graphic-object) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "type of graphics" "graph-type" (quote line) (list (list "line" (quote (quote line))) (list "arrow" (quote (quote arrow))) (list "free shape" (quote (quote pen))) (list "circle" (quote (quote cercle))) (list "rectangle" (quote (quote rect))) (list "polygon" (quote (quote polyg))) (list "test" (quote (quote text))))) (om-load-inputfun (quote input-funbox) "list of (x y)" "graph-points" nil) (om-load-inputfun (quote input-funbox) "" "graph-color" (om-make-color 0 0 0)) (om-load-inputfun (quote input-funbox) "normal or 'dash" "graph-line" (quote t)) (om-load-inputfun (quote input-funbox) "" "graph-size" 1) (om-load-inputfun (quote input-funbox) "" "graph-fill" nil))) (om-make-point 28 187) (om-make-point 334 123) (if (find-class (quote graphic-object) nil) (make-instance (quote graphic-object) :graph-type (quote pen) :graph-points (list (list 79/335 2/5) (list 79/335 84/215) (list 79/335 83/215) (list 79/335 82/215) (list 79/335 81/215) (list 79/335 78/215) (list 79/335 77/215) (list 79/335 74/215) (list 16/67 72/215) (list 81/335 14/43) (list 81/335 68/215) (list 82/335 66/215) (list 83/335 64/215) (list 84/335 63/215) (list 17/67 12/43) (list 87/335 58/215) (list 88/335 56/215) (list 18/67 54/215) (list 18/67 52/215) (list 91/335 51/215) (list 92/335 10/43) (list 92/335 49/215) (list 93/335 48/215) (list 94/335 47/215) (list 19/67 47/215) (list 19/67 46/215) (list 96/335 46/215) (list 96/335 9/43) (list 97/335 9/43) (list 97/335 44/215) (list 99/335 44/215) (list 101/335 44/215) (list 104/335 44/215) (list 107/335 44/215) (list 22/67 44/215) (list 111/335 44/215) (list 113/335 44/215) (list 23/67 44/215) (list 116/335 44/215) (list 117/335 9/43) (list 119/335 46/215) (list 24/67 47/215) (list 122/335 10/43) (list 25/67 54/215) (list 127/335 11/43) (list 26/67 59/215) (list 132/335 61/215) (list 2/5 63/215) (list 136/335 13/43) (list 138/335 68/215) (list 139/335 14/43) (list 28/67 72/215) (list 141/335 74/215) (list 141/335 76/215) (list 141/335 79/215) (list 142/335 81/215) (list 143/335 17/43) (list 144/335 89/215) (list 144/335 18/43) (list 144/335 93/215) (list 144/335 94/215) (list 144/335 96/215) (list 29/67 97/215) (list 29/67 102/215) (list 146/335 104/215) (list 146/335 106/215) (list 146/335 108/215) (list 146/335 111/215) (list 147/335 111/215) (list 148/335 111/215) (list 147/335 113/215) (list 146/335 113/215) (list 144/335 23/43) (list 141/335 116/215) (list 28/67 118/215) (list 139/335 118/215) (list 137/335 24/43) (list 136/335 24/43) (list 136/335 121/215) (list 2/5 121/215) (list 133/335 121/215) (list 131/335 122/215) (list 129/335 124/215) (list 127/335 124/215) (list 124/335 126/215) (list 122/335 126/215) (list 121/335 127/215) (list 119/335 3/5) (list 118/335 3/5) (list 117/335 26/43) (list 116/335 26/43) (list 114/335 131/215) (list 112/335 133/215) (list 22/67 27/43) (list 108/335 136/215) (list 107/335 137/215) (list 21/67 28/43) (list 104/335 141/215) (list 104/335 142/215) (list 103/335 144/215) (list 103/335 29/43) (list 103/335 146/215)) :graph-color (om-make-color 0 0 0) :graph-line (quote line) :graph-size 1 :graph-fill nil :graph-contents nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 350 260))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1139 255) (om-make-point 45 28) 5000 "5000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1086 250) (om-make-point 39 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 6000) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 100))) (om-make-point 1044 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 732 253) (om-make-point 52 28) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 681 248) (om-make-point 45 28) 1300 "1300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC 2" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 906 32) (om-make-point 291 181) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (1 4 7 14 14 23 23 24 34 41 41 45 46 46 46 51 52 53 54 54 55 57 60 62 63 65 67 68 69 71 72 72 74 79 81 88 92 92 93 93 95 96 98 98 98 99 101 103 103 103 103)) (quote (88 63 78 37 37 65 65 20 22 34 35 35 35 35 35 38 39 39 41 41 41 50 53 57 60 63 64 67 71 74 75 75 11 9 8 40 47 48 52 53 74 60 51 49 47 39 33 19 18 17 17)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1280 637) (om-make-point -8 -8) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 886 406) (om-make-point 332 208) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((1300) (1300) (1400) (1400) (1500) (1500) (1600) (1600) (1600) (1700) (1800) (1900) (1900) (2000) (2000) (2100) (2100) (2100) (2100) (2200) (2500) (2600) (2700) (2700) (2800) (3000) (3100) (3300) (3400) (3500) (3600) (3800) (3900) (4100) (4300) (4600) (4700) (4900) (5100) (5300) (5400) (5500) (5600) (5600) (5800) (6000) (6100) (6100) (6200) (6300) (6400) (6400) (6400) (6500) (6600) (6900) (7200) (7400) (7500) (7800) (7900) (8100) (8300) (8600) (9000) (9300) (9600) (9800) (10000) (10000) (1600) (1700) (1900) (2600) (3600) (4400) (4700) (4800) (5100) (5700) (6200) (6500) (6800) (6900) (7200) (7900) (8200) (8200))) :lonset (quote (100 100 127 127 181 181 208 235 290 317 371 425 452 479 533 561 588 642 642 723 886 967 967 1021 1075 1129 1238 1319 1373 1454 1482 1536 1617 1752 1834 1942 2023 2132 2267 2348 2403 2511 2538 2592 2701 2890 2998 3026 3107 3188 3242 3269 3296 3351 3513 3703 3865 3974 4055 4136 4163 4245 4326 4434 4543 4624 4678 4732 4759 4786 5000 5000 4919 4675 4296 3944 3673 3618 3375 3077 2725 2427 2183 2102 1776 1262 1018 991 6000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 854 409) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 905 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 843 252) (om-make-point 39 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 755 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 100) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 833 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 597 36) (om-make-point 291 181) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 12 12 11 10 12 16 18 18 18 17 15 15 13 13 12 12 12 13 13 14 14 14 15 16 17 17 18 18 19 19 19 19 19 18 18 18 17 16 16 15 14 14 14 14 13 14 14 14 16 17 18 19 20 21 21 22 23 24 25 26 27 28 28 29 29 29 30 31 32 34 35 35 36 36 37 37 38 38 38 39 40 40 41 42 44 44 46 48 48 49 50 51 51 52 52 53 54 55 57 59 60 61 62 64 64 66 66 67 69 71 71 74 75 79 80 81 84 86 87 88 89 91 93 94 94 97 99 100 100 100 100 99 99 99 99 99 99 99 99 99 99 98 98 99 99 99 99 98 98 98 98 98 98)) (quote (0 100 86 84 81 69 75 83 93 95 96 92 85 84 76 72 67 65 65 65 64 62 61 61 61 61 62 63 64 65 66 68 69 70 72 73 74 75 76 76 76 75 74 72 72 70 68 66 64 61 58 57 56 56 56 56 56 56 57 58 58 59 60 62 63 64 65 66 67 69 70 69 68 67 64 61 60 58 56 56 53 50 47 47 46 45 44 44 44 44 45 47 49 52 52 55 55 58 58 61 62 63 63 63 58 53 53 49 48 46 43 41 40 39 39 38 38 38 39 44 46 47 52 56 61 67 67 73 79 81 81 81 81 78 77 77 76 75 73 73 72 70 69 67 63 58 57 52 52 48 47 44 43 41 40)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1280 637) (om-make-point -8 -8) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 6000) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 7200))) (om-make-point 695 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 2 0 0 nil 0) (0 0 3 1 nil 0) (0 1 3 2 nil 0) (2 0 3 3 nil 0) (13 2 8 0 nil 0) (13 2 9 0 nil 0) (9 0 11 1 nil 0) (8 0 11 2 nil 0) (7 0 11 3 nil 0) (3 2 16 0 nil 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (21 0 20 1 nil 0) (16 0 20 2 nil 0) (4 0 20 6 nil 0) (23 0 21 0 nil 0) (22 0 21 1 nil 0) (24 0 23 0 nil 0) (26 0 24 0 nil 0) (22 0 24 1 nil 0) (3 1 26 0 nil 0) (18 0 26 1 nil 0) (17 0 26 2 nil 0))) nil 6.17))